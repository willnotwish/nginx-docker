# nginx.public.conf

# upstream php_upstream {
#   server wordpress:9000;
# }

server {
  # Expect SSL requests, try to use HTTP2
  listen 443 ssl http2 default_server;

  server_name _;

  root   /var/www/public/html;
  index  index.php;

  # Configure SSL
  ssl_certificate $SSL_CERT_HOME/fullchain.pem;
  ssl_certificate_key $SSL_CERT_HOME/privkey.pem;
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;
  ssl_dhparam $SSL_CERT_HOME/dhparam.pem;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
  ssl_prefer_server_ciphers on;

  access_log /var/www/public/log/nginx.fpm.access.log;
  error_log stderr info;

  # Deny requests for files that should never be accessed

  # 1. Hidden fields that start with a .
  location ~ /\. {
    deny all;
  }

  # 2. Ruby or log files
  location ~* ^.+\.(rb|log)$ {
    deny all;
  }

  # This is a catch all (default) block:
  #   - First, look to see if site is down for maintenance.
  #   - If not, serve static files first.
  #   - If no static file exists, rewrite as index.php?xxxyyy
  location / {
    try_files /system/maintenance.html
              $uri
              $uri/
              /index.php?$args;
  }

  # Most asset files (eg css, js) are served directly, but some are dynamic.
  # If not found, give PHP a chance.
  location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
    expires max;
    try_files $uri
              /index.php?$args;
  }

  # PHP proxying. See https://www.nginx.com/resources/wiki/start/topics/examples/phpfcgi/
  location ~ [^/]\.php(/|$) {
    # This directive defines a regular expression with two captured groups.
    # The first captured group is used as the value for the $fastcgi_script_name variable.
    # The second captured group is used as the value for the $fastcgi_path_info variable.
    # Both of these are often used to correctly parse the request so that the processor knows
    # which pieces of the request are the files to run and
    # which portions are additional information to pass to the script.
    fastcgi_split_path_info ^(.+?\.php)(/.*)$;

    include fastcgi_params;

    # Note the full path in SCRIPT_FILENAME.
    # It's different from the document root defined above because it's running in a different container
    fastcgi_param  SCRIPT_FILENAME    /var/www/html$fastcgi_script_name;

    fastcgi_param  PATH_INFO          $fastcgi_path_info;
    fastcgi_param  PATH_TRANSLATED    /var/www/html$fastcgi_path_info;

    fastcgi_pass php_upstream;
    fastcgi_index index.php;
    fastcgi_buffers 16 16k;
    fastcgi_buffer_size 32k;
  }
}
